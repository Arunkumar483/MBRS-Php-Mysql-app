AWSTemplateFormatVersion: "2010-09-09"
Description: This ALB Substack comprises of ALB and its components(ALB Listeners,ALB target group),an autoscaling group and their launch configuration.This stack ensures deployment of webservers in different subnets placed in different AZs.

Parameters:
  EnvironmentName:
    Description: An environment name that is prefixed to resource names
    Type: String
    Default: MRBS APP

  KeyName:
    Description: Key name for resource creation
    Type: String
  
  ImageId:
    Description: AMI Id for ec2 instance creation
    Type: String
  
  InstanceType:
    Description: Instance Type for ec2 instance creation
    Type: String
  
  VPC:
    Description: A reference to the created VPC
    Type: String

  PublicSubnet1:
    Description: A reference to the public subnet in the 1st Availability Zone
    Type: String

  PublicSubnet2:
    Description: A reference to the public subnet in the 2nd Availability Zone
    Type: String

  PrivateSubnet1:
    Description: A reference to the private subnet in the 1st Availability Zone for Web instance
    Type: String

  PrivateSubnet2:
    Description: A reference to the private subnet in the 2nd Availability Zone for Web instance
    Type: String
  
  RDSHost:
    Description: A reference to RDS Endpoint
    Type: String

  DBPassword:
    Description: DB Password
    Type: String
  
  DBUser:
    Description: DB User
    Type: String

Resources:
  Ec2SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: security group for EC2
      VpcId: !Ref VPC

  #RULES FOR EC2 SECURITY GROUPS
  SGBaseIngressForHttpEC2:
   Type: 'AWS::EC2::SecurityGroupIngress'
   Properties:
      GroupId: !Ref ALBSecurityGroup #the requests from port 80 coming from the alb security group can access the web instance 
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !GetAtt EC2SecurityGroup.GroupId # to which security group the rule should be added to
  
  SGBaseIngressForSSHEC2:
   Type: 'AWS::EC2::SecurityGroupIngress'
   Properties:
      GroupId: !Ref EC2SecurityGroup #the instances in the same vpc which has the same security group as web server will be able to ssh into the web server.
      IpProtocol: tcp
      FromPort: 22
      ToPort: 22
      SourceSecurityGroupId: !GetAtt EC2SecurityGroup.GroupId # to which security group the rule should be added to
  
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for ALB
      GroupName: ALBSecurityGroup
      VpcId:
        Ref: VPC
  
  #RULES FOR ALB SECURITY GROUPS
  SGBaseIngressForHttpALB:
   Type: 'AWS::EC2::SecurityGroupIngress'
   Properties:
      CidrIp: 0.0.0.0/0  #the requests from port 80 coming from anywhere can access the web instance 
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId # to which security group the rule should be added to
  
  ALB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
          Name: "arunkumaralb"
          Scheme: "internet-facing"
          Type: "application"
          Subnets: 
            - !Ref PublicSubnet1
            - !Ref PublicSubnet2
          SecurityGroups: 
            - !Ref ALBSecurityGroup

  ALBListener:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: '80'
      Protocol: HTTP

  ALBTargetGroup:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    DependsOn: [ LaunchConfig]
    Properties:
      HealthCheckPath: /index.php
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
   
      VpcId: !Ref VPC
      TargetGroupAttributes:
        - Key: stickiness.enabled
          Value: 'true'
        - Key: stickiness.type
          Value: lb_cookie
        - Key: stickiness.lb_cookie.duration_seconds
          Value: '30'

  WebASGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      VPCZoneIdentifier:
        - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref ALBTargetGroup
  
  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      ImageId: !Ref ImageId
      KeyName: !Ref KeyName
      SecurityGroups:
        - !Ref Ec2SecurityGroup
      InstanceType: !Ref InstanceType
      UserData:
        Fn::Base64: 
          !Join  
            - "\n"
            - - "#!/bin/bash"
              - "yum update -y"
              - "yum install git -y"
              - "yum update -y"
              - "amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2"
              - "yum install -y httpd mariadb-server"
              - "systemctl start httpd"
              - "systemctl enable httpd"
              - "usermod -a -G apache ec2-user"
              - "chown -R ec2-user:apache /var/www"
              - "chmod 2775 /var/www"
              - "cd tmp"
              - "git clone https://github.com/Arunkumar483/MBRS-Php-Mysql-app.git"
              - "cd MBRS-Php-Mysql-app"
              - !Join 
                  - ""
                  - - 'mysql -h '
                    - !Ref RDSHost
                    - ' -P 3306 -u '
                    - !Ref DBUser
                    - ' --password=' 
                    - !Ref DBPassword
                    - ' <tables.my.sql'
              - "cd web"
              - !Join
                  - ""
                  - - "sed -i "
                    - "'s/REPLACE_HOST/"
                    - !Ref RDSHost
                    - "/g' config.inc.php"
              - "cp -r * /var/www/html"

Outputs:
  WebsiteURL:
      Value: !Join 
        - ''
        - - 'http://'
          - !GetAtt 
            - ALB
            - DNSName
          - /
      Description : Endpoint of MRBS application  